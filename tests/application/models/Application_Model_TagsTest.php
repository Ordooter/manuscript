<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../application/models/Tags.php';

/**
 * Test class for Application_Model_Tags.
 * Generated by PHPUnit on 2010-02-24 at 10:39:10.
 */
class Application_Model_TagsTest extends Zend_Test_PHPUnit_DatabaseTestCase {
    private $_connectionMock;

    protected function getConnection()
    {
        if($this->_connectionMock == null) {
            $connection = Zend_Db::factory('PDO_SQLITE', array('dbname'=>APPLICATION_PATH.'/../data/db/manuscript-testing.db'));
            $this->_connectionMock = $this->createZendDbConnection($connection, 'zfunittests');
            Zend_Db_Table_Abstract::setDefaultAdapter($connection);
        }

        return $this->_connectionMock;
    }

    protected function getDataSet()
    {
        return $this->createFlatXmlDataSet(dirname(__FILE__).'/_files/tagsSeed.xml');
    }

    /**
     * Adds a new tag into the Database
     */
    public function testAddNewTag() {
        $tags   = new Application_Model_Tags();
        $id     = $tags->add('New Tag');
        $tag    = $tags->find($id);

        $this->assertEquals($id, $tag->id);
        $this->assertEquals('New Tag', $tag->name);
    }

    /**
     * Adds an existing tag into the Database
     */
    public function testAddExistingTag() {
        $tags       = new Application_Model_Tags();
        $origTag    = $tags->find(1);

        $id     = $tags->add('Programming');
        $tag    = $tags->find($id);

        $this->assertEquals($origTag->id, $tag->id);
        $this->assertEquals($origTag->name, $tag->name);
    }

    /**
     * @todo Implement testAssociate().
     */
    public function testAssociate() {
        $tags   = new Application_Model_Tags();
        $tag    = $tags->find(1);
        $files  = $tags->fetchFiles($tag->id);

        $this->assertEquals(count($files), 1);
        $tags->associate(array($tag->name), 1);

        $files  = $tags->fetchFiles($tag->id);
        $this->assertEquals(count($files), 2);
    }

    /**
     * Removes a tag from a File
     */
    public function testDisassociate() {
        $tags   = new Application_Model_Tags();
        $tags->disassociate(1);
        $files  = $tags->fetchFiles(3);

        $this->assertEquals(count($files), 0);
    }

    /**
     * Returns all the Tags in the Database
     */
    public function testFetchAll() {
        $tags   = new Application_Model_Tags();
        $result = $tags->fetchAll();

        $expected   = array('Programming', 'Sample', 'Tag');

        $this->assertEquals(count($result), 3);

        foreach($result as $row) {
            $this->assertTrue(in_array($row['name'], $expected));
        }
    }

    /**
     * Fetches a file based on a tag
     */
    public function testFetchFiles() {
        $tags   = new Application_Model_Tags();
        $files  = $tags->fetchFiles('1');

        $this->assertEquals(count($files), 1);
        $files  = $files->toArray();
        $file   = $files[0];
        
        $this->assertEquals(1, $file['id']);
        $this->assertEquals(5, $file['fileId']);
        $this->assertEquals(1, $file['tagId']);
        $this->assertEquals('File Title', $file['title']);
        $this->assertEquals(1, $file['revision']);
        $this->assertEquals('text/plain', $file['mimetype']);
        $this->assertEquals('2010-01-12 00:00:00', $file['dateUploaded']);
        $this->assertEquals('hash', $file['fsFilename']);
    }

    /**
     * Returns the tags for a file
     */
    public function testFetchTags() {
        $tags       = new Application_Model_Tags();
        $fileTags   = $tags->fetchTags(5);

        $expected   = array('Programming', 'Sample');

        foreach($fileTags as $tag) {
            $this->assertTrue(in_array($tag['name'], $expected));
        }
    }

    /**
     * Returns a specific tag by ID
     */
    public function testFindByID() {
        $tags       = new Application_Model_Tags();
        $origTag    = $tags->find(1);

        $this->assertEquals($origTag->id, 1);
        $this->assertEquals($origTag->name, 'Programming');
    }

    /**
     * Returns a specific tag by Name
     */
    public function testFindByName() {
        $tags       = new Application_Model_Tags();
        $origTag    = $tags->find('Programming');

        $this->assertEquals($origTag->id, 1);
        $this->assertEquals($origTag->name, 'Programming');
    }

    /**
     * Returns the backend table
     */
    public function testGetDbTable() {
        $tags  = new Application_Model_Tags();

        $this->assertType('Zend_Db_Table_Abstract', $tags->getDbTable());
    }

    /**
     * Sets the Tags table
     */
    public function testSetDbTable() {
        $tags  = new Application_Model_Tags();
        $tags->setDbTable('Application_Model_DbTable_Tags');

        $this->assertType('Application_Model_DbTable_Tags', $tags->getDbTable());
    }

    /**
     * Returns the Cross Reference table
     */
    public function testGetXrefTable() {
        $tags  = new Application_Model_Tags();

        $this->assertType('Zend_Db_Table_Abstract', $tags->getXrefTable());
    }

    /**
     * Removes a tag from the Database
     */
    public function testRemove() {
        $tags   = new Application_Model_Tags();
        $tags->remove(1);
        $tag    = $tags->find(1);

        $this->assertEquals($tag, null);
    }

    /**
     * Renames a tag
     */
    public function testRename() {
        $tags   = new Application_Model_Tags();
        $tags->rename(1, 'Not Programming');
        $tag    = $tags->find(1);

        $this->assertEquals($tag->name, 'Not Programming');
    }

    /**
     * Sets the Cross Reference Table
     */
    public function testSetXrefTable() {
        $tags  = new Application_Model_Tags();
        $tags->setXrefTable('Application_Model_DbTable_FilesTagsXref');

        $this->assertType('Application_Model_DbTable_FilesTagsXref', $tags->getXrefTable());
    }
}
?>
