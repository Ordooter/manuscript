<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../../../application/models/Mimetypes.php';

/**
 * Test class for Application_Model_Mimetypes.
 * Generated by PHPUnit on 2010-02-24 at 10:04:58.
 */
class Application_Model_MimetypesTest extends Zend_Test_PHPUnit_DatabaseTestCase {
    private $_connectionMock;

    protected function getConnection()
    {
        if($this->_connectionMock == null) {
            $connection = Zend_Db::factory('PDO_SQLITE', array('dbname'=>APPLICATION_PATH.'/../data/db/manuscript-testing.db'));
            $this->_connectionMock = $this->createZendDbConnection($connection, 'zfunittests');
            Zend_Db_Table_Abstract::setDefaultAdapter($connection);
        }

        return $this->_connectionMock;
    }

    protected function getDataSet()
    {
        return $this->createFlatXmlDataSet(dirname(__FILE__).'/_files/mimetypesSeed.xml');
    }
    
    /**
     * Adds a mimetype into the database
     */
    public function testAdd() {
        $data   = array(
            'newMimetype'   => 'application/excel',
            'description'   => 'Excel Spreadsheet',
        );

        $mimetypes  = new Application_Model_Mimetypes();
        $id         = $mimetypes->add($data);

        $this->assertTrue(($id > 3));
    }

    /**
     * Fetches a description from the database
     */
    public function testFetchDescription() {
        $mimetypes  = new Application_Model_Mimetypes();

        $expected   = array(
            'text/plain'            => 'Plain Text File',
            'text/html'             => 'HTML File',
            'application/msword'    => 'Word Document',
        );

        $returned   = array();
        foreach($expected as $key => $value) {
            $row            = $mimetypes->fetchDescription($key);
            $returned[$key] = $row['description'];
        }

        $this->assertEquals(count(array_intersect($expected, $returned)), 3);
    }

    /**
     * Returns any unknown Mimetypes in the Detail database
     */
    public function testFetchNew() {
        $mimetypes  = new Application_Model_Mimetypes();
        $new        = $mimetypes->fetchNew();

        $expected   = array(
            'application/unknown',
        );

        $this->assertEquals(count(array_intersect($new, $expected)), 1);
    }

    /**
     * Returns the backend table
     */
    public function testGetDbTable() {
        $mimetypes  = new Application_Model_Mimetypes();

        $this->assertType('Zend_Db_Table_Abstract', $mimetypes->getDbTable());
    }

    /**
     * Sets the DB Table
     */
    public function testSetDbTable() {
        $mimetypes  = new Application_Model_Mimetypes();
        $mimetypes->setDbTable('Application_Model_DbTable_Mimetypes');

        $this->assertType('Application_Model_DbTable_Mimetypes', $mimetypes->getDbTable());
    }

    /**
     * Returns the New Mimetypes view
     */
    public function testGetNewMimetypesTable() {
        $mimetypes  = new Application_Model_Mimetypes();

        $this->assertType('Zend_Db_Table_Abstract', $mimetypes->getNewMimetypesTable());
    }

    /**
     * Sets the New Mimetype view
     */
    public function testSetNewMimetypesTable() {
        $mimetypes  = new Application_Model_Mimetypes();
        $mimetypes->setDbTable('Application_Model_DbTable_NewMimetypes');

        $this->assertType('Application_Model_DbTable_NewMimetypes', $mimetypes->getDbTable());
    }
}
?>
